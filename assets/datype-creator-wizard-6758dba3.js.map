{"version":3,"file":"datype-creator-wizard-6758dba3.js","sources":["../../lib/sub-wizards/patterns.ts","../../lib/sub-wizards/datype-creator-wizard.ts"],"sourcesContent":["\nconst nameStartChar =\n  '[:_A-Za-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]' +\n  '|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]' +\n  '|[\\u3001-\\uD7FF]|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]';\nconst nameChar = nameStartChar + '|[.0-9\\\\-]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040]';\nconst nmToken = '(' + nameChar + ')+';\n\nexport const patterns = {\n    string:\n    '([\\u0009-\\u000A]|[\\u000D]|[\\u0020-\\u007E]|[\\u0085]|[\\u00A0-\\uD7FF]' +\n    '|[\\uE000-\\uFFFD])*',\n    normalizedString:\n    '([\\u0020-\\u007E]|[\\u0085]|[\\u00A0-\\uD7FF]|[\\uE000-\\uFFFD])*',\n    name,\n    nmToken,\n    names: name + '( ' + name + ')*',\n    nmTokens: nmToken + '( ' + nmToken + ')*',\n    decimal: '[+\\\\-]?[0-9]+(([.][0-9]*)?|([.][0-9]+))',\n    unsigned: '[+]?[0-9]+(([.][0-9]*)?|([.][0-9]+))',\n    integer: '[+\\\\-]?[0-9]+([0-9]*)',\n    alphanumericFirstUpperCase: '[A-Z][0-9,A-Z,a-z]*',\n    alphanumericFirstLowerCase: '[a-z][0-9,A-Z,a-z]*',\n    lnClass: '(LLN0)|[A-Z]{4,4}',\n};\n\n","import {\n\t// html,\n\tproperty,\n\t// LitElement,\n    customElement,\n    // TemplateResult,\n    // css,\n\tstate,\n  } from 'lit-element';\n\nimport { css, html, LitElement, TemplateResult } from 'lit';\nimport { patterns } from \"./patterns\"\n\nimport \"../components/wizard-select\";\nimport \"../components/wizard-textfield\";\nimport \"../components/wizard-card\";\nimport \"../icons/material-icons-outlined.css\"\nimport \"@material/mwc-button\";\n\n\nconst TAG_NAME = \"oscd-datype-creator-wizard\"\nconst allDataTypeSelector = [\"LNodeType\", \"DOType\", \"DAType\", \"EnumType\"];\n\n// Should be in a shared package somewhere\nexport function createElement(\n    doc: Document,\n    tag: string,\n    attrs: Record<string, string | null>\n): Element {\n    const element = doc.createElementNS(doc.documentElement.namespaceURI, tag);\n    Object.entries(attrs)\n        .filter(([_, value]) => value !== null)\n        .forEach(([name, value]) => element.setAttribute(name, value!));\n    return element;\n}\n\n@customElement(TAG_NAME)\nexport class DATypeCreatorWizard extends LitElement {\n    \n    @property({ type: Document}) templates: Document | undefined\n    @property({ type: String }) tagName: string = \"\";\n    @property({ type: Element }) parent: Element | undefined;\n\n    public newId = \"\";\n    public newDesc = \"\";\n    public newValueTemplate = \"\";\n    \n    render() {\n        return html`\n            <wizard-card>\n                <h2 slot=\"header\">Add DAType</h2>\n                <div class=\"form\">\n                    <wizard-select\n                        label=\"values\"\n                        name=\"values\"\n                        .maybeValue=${''}\n                        required\n                        icon=\"playlist_add_check\"\n                        maxlength=\"255\"\n                        minlength=\"1\"\n                        fixedMenuPosition\n                        pattern=\"${patterns.nmToken}\"\n                        @change=${ bindTargetValue(this, \"newValueTemplate\") }\n                    >\n                        ${ this.renderValueListItems() }\n                    </wizard-select>\n\n                    <wizard-textfield\n                        label=\"id\"\n                        name=\"id\"\n                        helper=\"${translate('scl.id')}\"\n                        required\n                        maxlength=\"127\"\n                        minlength=\"1\"\n                        pattern=\"${patterns.nmToken}\"\n                        dialogInitialFocus\n                        @input=${ bindTargetValue(this, \"newId\") }\n                    ></wizard-textfield>\n                    \n                    <wizard-textfield\n                        label=\"desc\"\n                        name=\"desc\"\n                        helper=\"${translate('scl.desc')}\"\n                        nullable\n                        pattern=\"${patterns.normalizedString}\"\n                        @input=${ bindTargetValue(this, \"newDesc\") }\n                    ></wizard-textfield>\n\n                    \n                </div>\n\n                <footer slot=\"footer\">\n                    <mwc-button @click=${this.handleOnClickCancel}>\n                        Cancel\n                    </mwc-button>\n\n                    <mwc-button trailingIcon icon=\"add\" @click=${this.handleOnClickAdd}>\n                        Add\n                    </mwc-button>\n                </footer>\n            </wizard-card>\n            \n            `\n    }\n\n    private renderValueListItems(): TemplateResult[] {\n        return Array\n            .from(this.templates.querySelectorAll('DAType'))\n            .map(this.renderValueItem)\n    }\n\n    private renderValueItem(datype: Element): TemplateResult {\n        return html`\n            <mwc-list-item\n                graphic=\"icon\"\n                hasMeta\n                value=\"${datype.getAttribute('id') ?? ''}\"\n            >\n                <span>\n                    ${datype.getAttribute('id')?.replace('OpenSCD_', '')}\n                </span>\n                <span slot=\"meta\">\n                    ${datype.querySelectorAll('BDA').length}\n                </span>\n            </mwc-list-item>\n        `\n    }\n\n   \n\n    static styles = css`\n\t\t.form {\n\t\t\tdisplay: flex;\n            flex-direction: column;\n            gap: 1rem;\n            padding: 1rem;\n\t\t}\n\n        footer{\n            display: flex;\n            flex-direction: row;\n            justify-content: flex-end;\n            gap: 1rem;\n        }\n\n        label{\n            display: flex;\n            flex-direction: column;\n        }\n\n\t`;\n\n    private emitDATypeCreation() {\n\n\n\n        const event = this.makeDATypeCreationEvent(this.newId, this.newDesc, this.newValueTemplate)\n        this.dispatchEvent(event)\n    }\n\n    private makeDATypeCreationEvent(\n        id: string, \n        desc: string, \n        templateId: string,\n    ) {\n        // const id = getValue(inputs.find(i => i.label === 'id')!);\n\n        if(!this.parent){ throw new Error('parent is required') }\n        if(this.tagName === ''){ throw new Error('tagName is required') }\n        if(!id){ throw new Error('id is required') }\n\n        const idExists = Array\n            .from(this.templates.querySelectorAll(allDataTypeSelector.join(\",\")))\n            .some(type => type.getAttribute('id') === id)\n\n        if (idExists){ throw new Error(`id '${id}' already exists`) }\n\n        // const desc = getValue(inputs.find(i => i.label === 'desc')!);\n        // const values = <Select>inputs.find(i => i.label === 'values');\n\n        let selectedTemplate: Element | null = null;\n        let element = createElement(this.parent.ownerDocument, 'DAType', {});\n        if(templateId){\n            selectedTemplate = this.templates.querySelector(`DAType[id=\"${templateId}\"]`)\n        }\n\n        if(selectedTemplate){\n            element = <Element>selectedTemplate.cloneNode(true)\n        }\n\n        element.setAttribute('id', id);\n        element.setAttribute('desc', desc);\n\n        const eventDetails = {\n            parent: this.parent,\n            node: element\n        }\n\n        const event = new CustomEvent(\"oscd-edit\", {detail: eventDetails, bubbles: true, composed: true})\n\n        // TODO: there was more here, check original\n        return event\n    }\n\n    private handleOnClickCancel(){\n        this.signalFinished()\n    }\n\n    private handleOnClickAdd(){\n        this.emitDATypeCreation()\n        this.signalFinished()\n    }\n\n    private signalFinished() {\n\n        const event = new CustomEvent('oscd-wizard-finished', {\n            bubbles: true,\n            composed: true,\n        })\n        this.dispatchEvent(event)\n    }\n\n}\n    \n    \nfunction translate(key: string): string {\n    return key\n}\n\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        [TAG_NAME]: DATypeCreatorWizard;\n    }\n}\n\n\nfunction bindTargetValue<T>(obj: T, key: keyof T){\n    return function( event: Event){\n        const target = event.target as HTMLInputElement\n        // @ts-ignore\n        obj[key] = target.value\n    }\n}"],"names":["nameStartChar","nameChar","nmToken","patterns","TAG_NAME","allDataTypeSelector","createElement","doc","tag","attrs","element","_","value","name","DATypeCreatorWizard","LitElement","html","bindTargetValue","datype","_a","event","id","desc","templateId","type","selectedTemplate","eventDetails","css","__decorateClass","property","customElement","obj","key","target"],"mappings":"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"}